{
	"title": "Logical Operators",
	"shared": false,
	"site_owned": true,
  "index":2,
	"description" : "Logical operators help you test for whats true and false. They're truly one of the most useful things in programming.",
	"tasks" :[
		{
			"title" : "Comparison Operators",
			"instructions" : "Boolean values are another datatype in Javascript. They can be true or false.<br/> Boolean values occur when we test <b>equality</b>. To test equality you can use the <b>==</b> operator. <br/> Store the value of the == operator in <b>x</b> and print it out to see how it works.",
			"expected_output" : "True",
			"test_case" : "",
			"type" : "BLOCK-TASK",
			"hint" : "Make sure you're printing out the value AFTER assigning it.",
			"program_blocks":[
				{
					"value" : "var x;",
					"type" : "DECLARE",
					"can_edit" : false
				}
			],
			"toolbox":[
				{
					"value" : "x=(2==(1+1));",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "console.log(x);",
					"type" : "LOG",
					"can_edit" : false
				}

			]
		},{
			"title" : "Other Comparison Operators",
			"instructions" : "There are other ways to compare values. You can also check if values are greater than (>) or less than (<). <br/> In this lesson we'll check if a number is less than another number and print out the value. <br/> This program should return <b>False</b>.",
			"expected_output" : "False",
			"test_case" : "",
			"type" : "BLOCK-TASK",
			"hint" : "Make sure you're putting the blocks in the right order!",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" :"x = 2",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			],
			"toolbox" : [
                                {
					"value" :"var y;",
					"type" : "DELCARE",
					"can_edit" : false
				},
                                {
					"value" :"y = 1+1",
					"type" : "ASSIGN",
					"can_edit" : false
				},
                                {
                                    "value" : "y=4;",
                                    "type" : "ASSIGN",
                                    "can_edit" : false
                                },
				{
					"value" : "console.log(x<y);",
					"type" : "LOG",
					"can_edit" : false
				},
                                {
					"value" : "// This is a comment",
					"type" : "COMMENT",
					"can_edit" : false
				}
			]
		},{
			"title" : "This or That?",
			"instructions" : "Just like with numbers, we can do operators on boolean values. One of those operations is <b> OR (||)</b>. When you <b> OR </b> two values you get True if one of the values is True. <br/> Here’s an example:<ul><li> True || True = True</li><li> True || False = True</li><li> False || False = False</li>f</ul><span class=”intr-block”> x||y</span> <br/> Should be True so the program should print out: <br/><span class=”example-output”>True</span>",
			"expected_output" : "True",
			"test_case" : "",
			"type" : "BLOCK-TASK",
			"hint" : "Try changing the values of x and y so they will equal -16.5 when multiplied together.",
			"program_blocks" : [
				{
					"value" : "console.log(x||y);",
					"type" : "LOG",
					"can_edit" : true
			    }
                        ],
			"toolbox" : [
				,{
					"value" : " var x ;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" : "var y;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" : "x = True;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{

					"value" : "x = False;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{

					"value" : "y = False;",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			]
		},{
			"title" : "This and That?",
			"instructions" : "In addition to OR there is also the <b>AND(&&)</b> operator. <b>AND(&&)</b> will be True only if both sides of the operator are True. <br/> For example: <br/><ul><li>True && True = True</li><li>True && False = False</li><li>False && False = False</li></ul><span class=”intr-block”> x&&y</span> <br/> Should be True so the program should print out: <br/><span class=”example-output”>True</span>",
			"expected_output" : "True",
			"test_case" : "",
			"type" : "BLOCK-TASK",
			"hint" : "Try changing the value of x",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" : "var y;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" : "console.log(x && y);",
					"type" : "LOG",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "x = True;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "y = False;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "x = False;",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			]
		},{
			"title" : "Not in My House!",
			"instructions" : "So we’ve seen how to combine True and False values using AND and OR. There’s one final logical operator, <b>NOT(!)</b>.<br/> NOT takes a boolean value and negates it. This means it turns True to False and vice versa.<br/> For example, <span class=”instr-block”>!False</span> would return <span class=”example-output”>True</span>. <br/>The following program should return <b>True</b>.",
			"expected_output" : "True",
			"test_case" : "",
			"type" : "BLOCK-TASK",
			"hint" : "Make sure you have the right value of x.",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" : "console.log(!x);",
					"type" : "LOG",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "x = True;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "x = False;",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			]
		}
	]
}
