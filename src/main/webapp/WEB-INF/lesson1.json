{
	"title": "Data Types",
	"shared": false,
	"site_owned": true,
	"description" : "This lesson will teach you the basic Data Types that are supported in JavaScript. Learning these types is essential to using JavaScript successfully and understanding the fundamentals of the programming language.",
	"tasks" :[
		{
			"title" : "Printing & Strings",
			"instructions" : "JavaScript has an important concept called <b>Data Typing</b>, which means giving different kinds of data a specific type. These types are used for determining the kinds of things a computer can do with the data based on its type.\n\nFor example, a <b>String</b> in JavaScript is a text based type. Strings can be anything from \"Bob and Alice\" to '1234' and are indicated by the single or double quotes that surround them. If a data type in JavaScript is surrounded by quotes (\"\" or '') then the type is a String.\n\nBefore learning more about types we will introduce a few useful tools in this task and the next. First is the ability to print information to <b>Output</b>. To do this we use the statement console.log(). You’ll see that the Editor to the right contains the block <span class = \"instr-block\">console.log(\"Hello\");</span>. Inside the parenthesis is the String \"Hello\". If you click the run button, the Output box will display:\n<span class = \"example-output\">Hello</span>\nAnything inside the parenthesis of console.log() will print to Output in the same order in which the statements appear from top to bottom in the Editor.\n\nTo test this, try putting the block <span class = \"instr-block\">console.log(\"World!\");</span> above <span class = \"instr-block\">console.log(\"Hello\");</span>. Now when you click run, the Output will display:\n<span class = \"example-output\">World!\nHello</span>\nThis doesn't make much sense, so move the <span class = \"instr-block\">console.log(\"World!\");</span> block so it is below <span class = \"instr-block\">console.log(\"Hello\");</span>. When you click run again the order will be reversed and the Output will display:\n<span class = \"example-output\">Hello\nWorld!</span>\n\nBefore moving on in each task, it's good to note small details in the blocks to prepare for the <b>Free Code</b> task at the end of this lesson. For example, each block statement, such as console.log(), must end with a semicolon. This lets the computer know when the end of a line has been reached, an essential part of running a program.",
			"program_blocks":[
				{
					"value" : "console.log(\"Hello\");",
					"type" : "LOG",
					"can_edit" : false
				}
			],
			"toolbox":[
				{
					"value" : "console.log(\"World!\");",
					"type" : "LOG",
					"can_edit" : false
				}
			]
		},{
			"title" : "Variables",
			"instructions" : "Often times in a program you want to use the same data multiple times. For example, say you have a long sentence like \"The quick brown fox jumps over the lazy dog.\" You don’t want to type out the entire sentence each time you want to use it. This is where <b>variables</b> become useful.\n\n<b>Variables</b>, similar to those used in algebra, are used to represent values in a program. Take a look at the block in the Editor, <span class = \"instr-block\">var str;</span>. When a variable is created it is said to be <b>declared</b>. This block <span class = \"instr-block\">var str;</span> declares a variable, var, with the name <b>str</b>. The next block, <span class = \"instr-block\">str = \"The quick brown fox jumps over the lazy dog.\";</span> assigns the String value to the variable name <b>str</b> and as such is called an <b>assignment</b>.\n\nNow drag the <span class = \"instr-block\">console.log(str);</span> block from the Toolbox into the Editor. Be careful to put the block after the others already placed there. When you run the code you'll notice that even though the console.log() statement only has the variable name <b>str</b>, it still prints out the sentence assigned to it.\n\nVariable names such as <b>str</b> can consist of any combination of numbers and letters with the following exceptions:<ul><li>The first character in the name can only be a letter or underscore ( _ )</li><li>The rest of the variable name can only contain letters, numbers, or underscores (no spaces, symbols, or special characters)</li></ul>\nThere is no limit to the length of variable names and it is important to note that variable names are case sensitive so str is a different name than Str or STR.\n\nOne last thing before moving to the next task. Note the block in the toolbox that looks like this <span class = \"instr-block\">// This is a comment</span>. The double slash (//) indicates a comment in the program. Comments are lines that will be ignored by the computer when running the program and can contain any characters.",
			"program_blocks" : [
				{
					"value" : "var str;",
					"type" : "DECLARE",
					"can_edit" : false
				},{
					"value" : "str = \"The quick brown fox jumps over the lazy dog.\";",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "console.log(str);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "// This is a comment",
					"type" : "COMMENT",
					"can_edit" : false
				}

			]
		},{
			"title" : "Numbers & Operations",
			"instructions" : "Introduce the number type, then introduce the operations you can do on them",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "var y;",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "x=3;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "y=4;",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "console.log(x + y);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "console.log(3 + 4);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "y=6",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "var total = x + y;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "console.log(total);",
					"type" : "LOG",
					"can_edit" : false
				}

			]
		},{
			"title" : "Strings & Operations & Numbers",
			"instructions" : "Go back to strings and show how they can be added together as well. Also show how numbers can be added to strings. Mention ++/-- and +=, -=, etc.",
			"program_blocks" : [
				{
					"value" : "var age = 10;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "var older = 12;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "var bob = “Bob”;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "var str = “ is ”;",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "console.log(bob + str + age);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "console.log(4 + 6 + bob);",
					"type" : "LOG",
					"can_edit" : false
				}

			]
		},{
			"title" : "Null & Undefined",
			"instructions" : "What happens when a variable is not defined and you try to print it? What happens when you try to do math operations that are not defined?",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "ASSIGN",
					"can_edit" : false
				},{
					"value" : "var total = 1/0;",
					"type" : "ASSIGN",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "console.log(x);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "console.log(total);",
					"type" : "LOG",
					"can_edit" : false
				}

			]
		}
	]
}


