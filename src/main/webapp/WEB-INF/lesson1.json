{
	"title": "Data Types",
	"shared": false,
	"site_owned": true,
	"index" : 1,
	"description" : "This lesson will teach you the basic Data Types that are supported in JavaScript. Learning these types is essential to using JavaScript successfully and understanding the fundamentals of the programming language.",
	"tasks" :[
		{
			"title" : "Printing & Strings",
			"instructions" : "JavaScript has an important concept called <b>Data Typing</b>, which means giving different kinds of data a specific type. These types are used for determining the kinds of things a computer can do with the data based on its type.<br/><br/>For example, a <b>String</b> in JavaScript is a text based type. Strings can be anything from \"Bob and Alice\" to '1234' and are indicated by the single or double quotes that surround them. If a data type in JavaScript is surrounded by quotes (\" \" or ' ') then the type is a String.<br/><br/>Before learning more about types we will introduce a few useful tools in this task and the next. First is the ability to print information to <b>Output</b>. To do this we use the statement console.log(). You'll see that the Editor to the right contains the block <span class = \"instr-block\">console.log(\"Hello\");</span>. Inside the parenthesis is the String \"Hello\". If you click the run button, the Output box will display:<span class = \"example-output\">Hello</span>Anything inside the parenthesis of console.log() will print to Output in the same order in which the statements appear from top to bottom in the Editor.<br/><br/>To test this, try putting the block <span class = \"instr-block\">console.log(\"World!\");</span> above <span class = \"instr-block\">console.log(\"Hello\");</span>. Now when you click run, the Output will display:<span class = \"example-output\">World!<br/>Hello</span>This doesn't make much sense, so move the <span class = \"instr-block\">console.log(\"World!\");</span> block so it is below <span class = \"instr-block\">console.log(\"Hello\");</span>. When you click run again the order will be reversed and the Output will display:<span class = \"example-output\">Hello<br/>World!</span>Before moving on in each task, it's good to note small details in the blocks to prepare for the <b>Free Code</b> task at the end of this lesson. For example, each block statement, such as console.log(), must end with a semicolon. This lets the computer know when the end of a line has been reached, an essential part of running a program.",
			"expected_output" : ["Hello\nWorld!"],
			"test_case" : [""],
			"type" : "BLOCK-TASK",
			"hint" : "Make sure that the \"Hello\" block is above the \"World!\" one.",
			"program_blocks":[
				{
					"value" : "console.log(\"Hello\");",
					"type" : "LOG",
					"can_edit" : false
				}
			],
			"toolbox":[
				{
					"value" : "console.log(\"World!\");",
					"type" : "LOG",
					"can_edit" : false
				}
			]
		},{
			"title" : "Variables",
			"instructions" : "Often times in a program you want to use the same data multiple times. For example, say you have a long sentence like \"Pack my box with five dozen liquor jugs.\" You don't want to type out the entire sentence each time you want to use it. This is where <b>variables</b> become useful.<br/><br/><b>Variables</b>, similar to those used in algebra, are used to represent values in a program. Take a look at the block in the Editor, <span class = \"instr-block\">var str1;</span>. When a variable is created it is said to be <b>declared</b>. This block <span class = \"instr-block\">var str1;</span> declares a variable, var, with the name <b>str1</b>. The next block, <span class = \"instr-block\">str1 = \"Pack my box with five dozen liquor jugs.\";</span> assigns the String value to the variable name <b>str1</b> and as such is called an <b>assignment</b>. A second sentence is similarly assigned to the variable str2.<br/><br/>Now drag the <span class = \"instr-block\">console.log(str1);</span> block from the Toolbox into the Editor. Be careful to put the block after the others already placed there. When you run the code you'll notice that even though the console.log() statement only has the variable name <b>str1</b>, it still prints out the sentence assigned to it.<br/><br/>Variable names such as <b>str1</b> and <b>str2</b> can consist of any combination of numbers and letters with the following exceptions:<ul><li>The first character in the name can only be a letter or underscore ( _ )</li><li>The rest of the variable name can only contain letters, numbers, or underscores (no spaces, symbols, or special characters)</li></ul><br/>There is no limit to the length of variable names and it is important to note that variable names are case sensitive so str is a different name than Str or STR.<br/><br/>One last thing before moving to the next task. Note the block in the toolbox that looks like this <span class = \"instr-block\">// This is a comment</span>. The double slash (//) indicates a comment in the program. Comments are lines that will be ignored by the computer when running the program and can contain any characters.",
			"expected_output" : ["The quick brown fox jumps over the lazy dog."],
			"test_case" : [""],
			"type" : "BLOCK-TASK",
			"hint" : "Change the console.log() statement so it prints out str2.",
			"program_blocks" : [
				{
					"value" : "var str1;",
					"type" : "STATIC",
					"can_edit" : false
				},
				{
					"value" : "var str2;",
					"type" : "STATIC",
					"can_edit" : false
				},
				{
					"value" : "str1 = \"Pack my box with five dozen liquor jugs.\";",
					"type" : "STATIC",
					"can_edit" : false
				},
				{
					"value" : "str2 = \"The quick brown fox jumps over the lazy dog.\";",
					"type" : "STATIC",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "console.log();",
					"type" : "LOG",
					"can_edit" : true,
					"children" : [{"str1"}]
				},
				{
					"value" : "// This is a comment",
					"type" : "STATIC",
					"can_edit" : false
				},
				{
					"value" : "str2",
					"type" : "STATIC",
					"can_edit" : false
				}

			]
		},{
			"title" : "Numbers & Operations",
			"instructions" : "In addition to the <b>String</b> type, JavaScript has a <b>Number</b> type. Numbers can include decimal digits as well as negatives. Here are some examples of the <b>Number</b> type: 10, 3.14, -2.5. Numbers can also be assigned to variables.<br/><br/>Take a look at the Editor to the right. There are two variables declared, <span class = \"instr-block\">var x;</span> and <span class = \"instr-block\">var y;</span>. Drag the <span class = \"instr-block\">x = 3;</span> block and <span class = \"instr-block\">y = 6;</span> block from the Toolbox so they sit on the lines below their declarations. Then drag the <span class = \"instr-block\">console.log(x);</span> block so it is below the assignment of x = 3. Run the program and the following should be displayed in the Output box:<span class = \"example-output\">3</span>The same basic operations that can be used on numbers in math can also be done in JavaScript. Addition, subtraction, multiplication, and division are all represented by the following symbols respectively: + - * /. The results of these operations can then be stored in variables.<br/><br/>For example, take a look at the blocks in the Toolbox. You'll notice that there is a block <span class = \"instr-block\">var total = 3 + 6;</span>. If you drag that block into the Editor, and then put the block <span class = \"instr-block\">console.log(total);</span> after it and run the program again you'll get the following Output:<span class = \"example-output\">9</span>This means that 9, the result of 3 + 6, was placed into the variable <b>total</b> which was then printed to the Output box. These operations can also be done using the variables that have been assigned the numbers. If you remove the block <span class = \"instr-block\">var total = 3 + 6;</span> and replace it with <span class = \"instr-block\">var total = x + y;</span> when you run the program again the same value, 9, will be printed to Output.<br/><br/>These concepts can also be applied to the other operations mentioned earlier and we have provided additional blocks in the Toolbox for you to play around with. Try and get the total to equal -16.5 and print it to the Output box to move on to the next task.",
			"expected_output" : ["-16.5"],
			"test_case" : [""],
			"type" : "BLOCK-TASK",
			"hint" : "Try changing the values of x and y so they will equal -16.5 when multiplied together.",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "var y;",
					"type" : "STATIC",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "x = 3;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "y = 6;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "console.log(x + y);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "console.log(3 + 6);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "var total = x + y;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "console.log(total);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "var total = 3 + 6;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "var total = x - y;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "var total = x * y;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "var total = x / y;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "x = -3;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "x = 3.5;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "y = 5.5;",
					"type" : "STATIC",
					"can_edit" : false
				}

			]
		},{
			"title" : "More Operations on Strings & Numbers",
			"instructions" : "For Data Types in JavaScript, each type comes with its own set of rules and operations. For example, Strings can be added together just like numbers. Adding two Strings together using the plus sign results in a larger String that is a concatenation of the two. Take a look at the block in the Editor that reads <span class = \"instr-block\">console.log(\"Alice\" + \"Bob\");</span>. If you run the code, the result in the Output box will be:<span class = \"example-output\">AliceBob</span>However the only operation that is the same between Numbers and Strings is the plus operator. You cannot subtract, multiply, or divide Strings without breaking the program.<br/><br/>Since Numbers and Strings can both be added separately, they can be added together as well. Remove the <span class = \"instr-block\">console.log(\"Alice\" + \"Bob\");</span> block from the Editor and replace it with <span class = \"instr-block\">console.log(alice + age);</span>. When you run the program, it will produce the following Output:<span class = \"example-output\">Alice is 20</span>This is because the program takes the number and converts it into a String so it will look like this: \"Alice is \" + \"20\". Then the program adds the Strings together and prints out the result. This can be done in any order so if you want to print out \"20 Cats\" you would use the block <span class = \"instr-block\">console.log(20 + \" Cats\");</span>. Finally, Numbers have a few shorthand operations that are unique to their type. First are the increment and decrement operators. Take the block <span class = \"instr-block\">age++;</span> from the Toolbox and put it in the Editor before the <span class = \"instr-block\">console.log(alice + age);</span> block. When you run the program again the result will be slightly different:<span class = \"example-output\">Alice is 21</span>This is because the ++ operator adds 1 to any number it follows, so age++ equals 21. This same idea is applied to subtraction as well, so if you want to subtract 1 from Alice's age you would replace <span class = \"instr-block\">age++;</span> with <span class = \"instr-block\">age--;</span>.The second group of operators are used as a shorthand for adding, subtracting, multiplying and dividing two numbers. Remove all console.log() blocks from the Editor and drag the block <span class = \"instr-block\">var cats = 5;</span> into the bottom of the program. Then put the block <span class = \"instr-block\">cats += 3;</span> followed by <span class = \"instr-block\">console.log(cats);</span>. When you run the program the result will be 8, this is because the += operator adds the amount on the right to the value stored by the variable on the left. In this case that is 5 + 3 = 8. This works the same way for all of the other basic math operators, -=, *=, and /=. All of them take the value on the right and subtract, multiply, or divide it with the value on the left.<br/><br/>Before moving on to the next task, note that these shorthand math operations only work on variables. You cannot do 20++ to get 21 or 5 += 3 to get 8. Both require that the number on the left is a variable.",
			"expected_output" : ["8"],
			"test_case" : [""],
			"type" : "BLOCK-TASK",
			"hint" : "",
			"program_blocks" : [
				{
					"value" : "var age = 20;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "var alice = \"Alice is \";",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "console.log(\"Alice\" + \"Bob\");",
					"type" : "LOG",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "console.log(alice + age);",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "console.log(20 + \" Cats\");",
					"type" : "LOG",
					"can_edit" : false
				},{
					"value" : "age++;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "age--;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "var cats = 5;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "cats += 3;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "console.log(cats);",
					"type" : "STATIC",
					"can_edit" : false
				}

			]
		},{
			"title" : "Undefined & NaN",
			"instructions" : "Now that you've learned about some of the different Data Types in JavaScript we're going to teach you what can happen when things go wrong. The first is actually its own type called undefined. <b>Undefined</b> is the type all variables are when they have been declared, but have not yet been assigned a value. For example, look at the blocks in the Editor, <span class = \"instr-block\">var x;</span> and <span class = \"instr-block\">console.log(x);</span>. If you run the program the following Output will be displayed:<span class = \"example-output\">undefined</span>If you drag the <span class = \"instr-block\">x = 10;</span> block in between the two blocks already in the Editor and run the code again you'll get the following Output:<span class = \"example-output\">10</span>As you can see, once you assign a value to the variable, the variable is no longer undefined. This undefined type is helpful to know about when looking for errors in your program.<br/><br/>One other keyword to look for is NaN. <b>NaN</b> stands for <b>Not a Number</b> and often occurs when you are trying to perform an operation on a type that is invalid. For example, drag the block <span class = \"instr-block\">console.log(\"Multiplying\" * \"Strings\");</span> into the bottom of the Editor. When you run the code NaN will print out in the Output box indicating that you cannot multiply two Strings together and get an number. Keeping both of these errors in mind will be important when completing the next task.",
			"expected_output" : ["10\nNaN"],
			"test_case" : [""],
			"type" : "BLOCK-TASK",
			"hint" : "You should have two print statements, one that prints a number and the other that prints an error.",
			"program_blocks" : [
				{
					"value" : "var x;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "console.log(x);",
					"type" : "LOG",
					"can_edit" : false
				}
			],
			"toolbox" : [
				{
					"value" : "x = 10;",
					"type" : "STATIC",
					"can_edit" : false
				},{
					"value" : "console.log(\"Multiplying\" * \"Strings\");",
					"type" : "LOG",
					"can_edit" : false
				}

			]
		}
	]
}


